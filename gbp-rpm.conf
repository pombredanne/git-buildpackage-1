# Configuration file for git-buildpackage rpm tools

[DEFAULT]
# Default build command
#builder = rpmbuild -ba
# Default clean command:
#cleaner = git clean -fd
# Default branch for upstream sources
#upstream-branch = upstream
# Default branch for the packaging files
#packaging-branch = master
# Name of the distribution vendor
#vendor=myvendor
# Default tag formats to be used
#upstream-tag = upstream/%(version)s
#packaging-tag = packaging/%(version)s
# Use pristine-tar
#pristine-tar = True
# Don't check if packaging-branch == current branch
#ignore-branch = True
# Use color when on a terminal, alternatives: on/true, off/false or auto
#color = auto
# Directory containing rpm packaging files
#packaging-dir=rpm
# Spec file to be used
#spec-file = gbp.spec
# Compress auto-generated patches
#patch-compress=100k
# Squash commits until certain tree-ish into one diff
#patch-squash = stable-updates:stable
# Export patches with numbering in filenames
#patch-numbers = False

###
### Options only affecting git-buildpackage-rpm
###
[git-buildpackage-rpm]
# Look for a tag matching the upstream version when creating a tarball
#upstream-tree = tag
# Uncomment this to automatically GPG sign tags
#sign-tags = True
# Keyid to GPG sign tags with
#keyid = 0xdeadbeef
# Push to a remote repository after a successful tag
#posttag = git-push git.example.com
# Run rpmlint after a successful build (for all rpm's found under build dir)
#postbuild = find $GBP_BUILD_DIR -name '*rpm' -exec rpmlint -i {} \;
# Run a script before build
#prebuild = GIT_DIR=$GBP_GIT_DIR my_prebuild.sh
# Build/export in a non-default directory
#export-dir = ../build-area/
# Special directory to look for pre-built orig source archives
#tarball-dir = ../tarballs/
# Build despite of unclean repository, i.e. untracked files are present
#ignore-untracked = True
# Ignore all local changes (i.e. build despite of modified files)
#ignore-new = True
# Commit-ish to build
#export = HEAD
# Use best compression
#compression-level = best
# Don't send notifications, alternatives: on/true, off/false or auto
#notify = off
# Transparently handle submodules
#submodules = True
# Rpmbuild related options
#rpmbuild-builddir=BUILD_DIR
#rpmbuild-rpmdir=RPM_DIR
#rpmbuild-sourcedir=SOURCE_DIR
#rpmbuild-specdir=SPEC_DIR
#rpmbuild-srpmdir=SRPM_DIR
#rpmbuild-buildrootdir=BUILDROOT_DIR
# Generate patches against upstream
#patch-export = True

###
### Options only affecting git-import-orig-rpm
###
[git-import-orig-rpm]
# Set a different upstream branch to import to:
#upstream-branch = newupstream
# Set a different branch to merge to:
#packaging-branch = pkgclean
# Don't merge new upstream to packaging branch by default:
#merge = False
# Filter out files when importing
#filter = .svn
# Filter out files from tarball passed to pristine tar:
#filter-pristine-tar = True
# Name used in storing tarballs in pristine-tar branch
#pristine-tarball-name = %(name)s_%(version)s%(filename_ext)s
# Run hook after the import
#postimport = my_postimport.sh
# Commit message for new upstream version
#import-msg = New upstream version %(version)s

###
### Options only affecting git-import-srpm
###
[git-import-srpm]
# Set a different upstream branch
#upstream-branch = svn-upstream
# Filter out files when importing
#filter = [ 'CVS', '.cvsignore' ]
# Force committer of upstream source / packaging to be the same as author
#author-is-committer = True

###
### Options only affecting gbp-pq-rpm
###
[gbp-pq-rpm]
# Name of the patch-queue / development branch
#pq-branch = %(branch)s-devel

###
### Options only affecting gbp-clone
###
[gbp-clone]
# Track pristine-tar branch
#pristine-tar = True

###
### Options only affecting gbp-pull
###
[gbp-pull]
# Pull pristine-tar branch
#pristine-tar = True

###
### Options only affecting gbp-create-remote-repo
###
[gbp-create-remote-repo]
# Disable remote branch tracking
#track = False

# Options only affecting git-rpm-changelog
[git-rpm-changelog]
# Changelog filename, relative to the git topdir
#changelog-file = git-buildpackage.changelog
# Format string for the revision part of the changelog header
#changelog-revision = %(tagname)s
# Preferred editor
#editor-cmd = vim
